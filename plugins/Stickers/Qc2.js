import axios from 'axios'

const flagMap = [
  ['598', 'üá∫üáæ'], ['595', 'üáµüáæ'], ['593', 'üá™üá®'], ['591', 'üáßüá¥'],
  ['590', 'üáßüá∂'], ['509', 'üá≠üáπ'], ['507', 'üáµüá¶'], ['506', 'üá®üá∑'],
  ['505', 'üá≥üáÆ'], ['504', 'üá≠üá≥'], ['503', 'üá∏üáª'], ['502', 'üá¨üáπ'],
  ['501', 'üáßüáø'], ['599', 'üá®üáº'], ['597', 'üá∏üá∑'], ['596', 'üá¨üá´'],
  ['594', 'üá¨üá´'], ['592', 'üá¨üáæ'], ['590', 'üá¨üáµ'], ['549', 'üá¶üá∑'],
  ['58', 'üáªüá™'], ['57', 'üá®üá¥'], ['56', 'üá®üá±'], ['55', 'üáßüá∑'],
  ['54', 'üá¶üá∑'], ['53', 'üá®üá∫'], ['52', 'üá≤üáΩ'], ['51', 'üáµüá™'],
  ['34', 'üá™üá∏'], ['1', 'üá∫üá∏']
]

function numberWithFlag(num) {
  const clean = num.replace(/[^0-9]/g, '');
  for (const [code, flag] of flagMap) {
    if (clean.startsWith(code)) return `${num} ${flag}`;
  }
  return num;
}

const colors = {
  rojo: '#FF0000',
  azul: '#0000FF',
  morado: '#800080',
  verde: '#008000',
  amarillo: '#FFFF00',
  naranja: '#FFA500',
  celeste: '#00FFFF',
  rosado: '#FFC0CB',
  negro: '#000000',
  blanco: '#FFFFFF',
  gris: '#808080',
  marron: '#8B4513',
  aqua: '#00CED1',
  lima: '#32CD32',
  coral: '#FF7F50',
  dorado: '#FFD700',
  plata: '#C0C0C0'
}

const handler = async (m, { conn, args, usedPrefix, command }) => {
  const chatId = m.chat;
  const quoted = m.quoted;
  let targetJid = m.sender;
  let quotedText = '';
  let qPush = '';

  if (quoted) {
    targetJid = quoted.sender;
    quotedText = quoted.text || '';
    qPush = quoted.name || '';
  }

  let text = args.join(' ').trim();
  if (!text && !quotedText) {
    return m.reply(
      `‚úèÔ∏è *Crea una imagen tipo sticker con un mensaje personalizado*\n\n` +
      `üìå *Ejemplo:*\n` +
      `‚Ä¢ ${usedPrefix + command} [color] [texto]\n` +
      `‚Ä¢ .opnion2 morado Elite Bot\n\n` +
      `üé® *Colores disponibles:*\n` +
      `${Object.keys(colors).map(c => `- ${c}`).join('\n')}`
    )
  }

  const firstWord = text.split(' ')[0].toLowerCase();
  const bgColor = colors[firstWord] || colors['negro'];
  let content = colors[firstWord] ? text.split(' ').slice(1).join(' ').trim() : text;
  if (!content) content = quotedText || ' ';

  const displayName = qPush || (await conn.getName(targetJid)) || numberWithFlag(targetJid.split('@')[0]);

  let avatar = 'https://telegra.ph/file/24fa902ead26340f3df2c.png';
  try {
    avatar = await conn.profilePictureUrl(targetJid, 'image');
  } catch {}

  await conn.sendMessage(chatId, { react: { text: 'üñºÔ∏è', key: m.key } });

  const quoteData = {
    type: 'quote',
    format: 'png',
    backgroundColor: bgColor,
    width: 600,
    height: 900,
    scale: 3,
    messages: [{
      entities: [],
      avatar: true,
      from: {
        id: 1,
        name: displayName,
        photo: { url: avatar }
      },
      text: content,
      replyMessage: {}
    }]
  };

  try {
    const { data } = await axios.post('https://bot.lyo.su/quote/generate', quoteData, {
      headers: { 'Content-Type': 'application/json' }
    });

    const imgBuffer = Buffer.from(data.result.image, 'base64');

    await conn.sendMessage(chatId, {
      image: imgBuffer,
      caption: displayName
    }, { quoted: m });

    await conn.sendMessage(chatId, { react: { text: '‚úÖ', key: m.key } });

  } catch (e) {
    console.error('‚ùå Error en qc2:', e);
    await m.reply('‚ùå Ocurri√≥ un error al generar la imagen.');
  }
}

handler.command = /^qc2|opini√≥n2|opinion2$/i
handler.help = ['qc2']
handler.tags = ['sticker']

export default handler
